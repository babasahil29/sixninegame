{
	"info": {
		"_postman_id": "crypto-crash-api-collection",
		"name": "Crypto Crash API",
		"description": "Complete API collection for testing the Crypto Crash backend endpoints. This collection includes all game, wallet, cryptocurrency, and WebSocket management endpoints with example requests and responses.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "crypto-crash-backend"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Server Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check if the server is running and get system information including uptime, memory usage, and version."
					},
					"response": [
						{
							"name": "Health Check Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/health",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"OK\",\n  \"timestamp\": \"2024-01-01T12:00:00.000Z\",\n  \"uptime\": 3600,\n  \"memory\": {\n    \"rss\": 50331648,\n    \"heapTotal\": 20971520,\n    \"heapUsed\": 15728640,\n    \"external\": 1048576\n  },\n  \"version\": \"v16.14.0\"\n}"
						}
					]
				}
			],
			"description": "Health check endpoints for monitoring server status"
		},
		{
			"name": "Game API",
			"item": [
				{
					"name": "Get Current Game State",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/game/state",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"game",
								"state"
							]
						},
						"description": "Get the current game state including round information, multiplier, and status."
					},
					"response": [
						{
							"name": "Game State Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/game/state",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"game",
										"state"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"roundId\": \"round_1234567890_1\",\n    \"status\": \"active\",\n    \"multiplier\": 2.45,\n    \"isActive\": true,\n    \"startTime\": \"2024-01-01T12:00:00.000Z\",\n    \"bets\": 5,\n    \"hash\": \"abc123...\"\n  }\n}"
						}
					]
				},
				{
					"name": "Place Bet",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"playerId\": \"{{player_id}}\",\n  \"usdAmount\": 10.50,\n  \"cryptocurrency\": \"bitcoin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/game/bet",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"game",
								"bet"
							]
						},
						"description": "Place a bet in the current game round. The USD amount will be converted to the specified cryptocurrency at current market rates."
					},
					"response": [
						{
							"name": "Bet Placed Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"playerId\": \"player_alice\",\n  \"usdAmount\": 10.50,\n  \"cryptocurrency\": \"bitcoin\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/game/bet",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"game",
										"bet"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"message\": \"Bet placed successfully\",\n  \"data\": {\n    \"bet\": {\n      \"playerId\": \"player_alice\",\n      \"usdAmount\": 10.50,\n      \"cryptoAmount\": 0.00015671,\n      \"cryptocurrency\": \"bitcoin\",\n      \"priceAtTime\": 67000\n    },\n    \"transaction\": \"tx_abc123...\"\n  }\n}"
						}
					]
				},
				{
					"name": "Cash Out",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"playerId\": \"{{player_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/game/cashout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"game",
								"cashout"
							]
						},
						"description": "Cash out from the current game round at the current multiplier. Only works if the player has an active bet and the game hasn't crashed yet."
					},
					"response": [
						{
							"name": "Cash Out Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"playerId\": \"player_alice\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/game/cashout",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"game",
										"cashout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"message\": \"Cashed out successfully\",\n  \"data\": {\n    \"multiplier\": 2.45,\n    \"amount\": 25.73,\n    \"cryptoAmount\": 0.00038394,\n    \"transaction\": \"tx_def456...\"\n  }\n}"
						}
					]
				},
				{
					"name": "Get Game History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/game/history?limit=20&page=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"game",
								"history"
							],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"description": "Number of rounds to return (max 100)"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number for pagination"
								}
							]
						},
						"description": "Get paginated history of completed game rounds with crash points and bet information."
					},
					"response": []
				},
				{
					"name": "Get Round Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/game/round/{{round_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"game",
								"round",
								"{{round_id}}"
							]
						},
						"description": "Get detailed information about a specific game round including all bets and outcomes."
					},
					"response": []
				},
				{
					"name": "Verify Round (Provably Fair)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roundId\": \"{{round_id}}\",\n  \"seed\": \"abc123...\",\n  \"crashPoint\": 2.45\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/game/verify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"game",
								"verify"
							]
						},
						"description": "Verify the fairness of a completed round using the provided seed. This proves the crash point was not manipulated."
					},
					"response": []
				}
			],
			"description": "Game-related endpoints for managing rounds, bets, and cash outs"
		},
		{
			"name": "Wallet API",
			"item": [
				{
					"name": "Create Player",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"playerId\": \"player_new\",\n  \"username\": \"newplayer\",\n  \"initialBalance\": {\n    \"bitcoin\": 0.01,\n    \"ethereum\": 1.0\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wallet/player",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wallet",
								"player"
							]
						},
						"description": "Create a new player with an initial cryptocurrency wallet balance."
					},
					"response": [
						{
							"name": "Player Created Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"playerId\": \"player_new\",\n  \"username\": \"newplayer\",\n  \"initialBalance\": {\n    \"bitcoin\": 0.01,\n    \"ethereum\": 1.0\n  }\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/wallet/player",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"wallet",
										"player"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"message\": \"Player created successfully\",\n  \"data\": {\n    \"playerId\": \"player_new\",\n    \"username\": \"newplayer\",\n    \"wallet\": {\n      \"bitcoin\": 0.01,\n      \"ethereum\": 1.0\n    },\n    \"totalBets\": 0,\n    \"totalWins\": 0,\n    \"totalLosses\": 0,\n    \"isActive\": true\n  }\n}"
						}
					]
				},
				{
					"name": "Get Wallet Balance",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/wallet/balance/{{player_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wallet",
								"balance",
								"{{player_id}}"
							]
						},
						"description": "Get the current wallet balance for a player, including USD equivalent values based on current market prices."
					},
					"response": [
						{
							"name": "Wallet Balance Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/wallet/balance/player_alice",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"wallet",
										"balance",
										"player_alice"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"playerId\": \"player_alice\",\n    \"username\": \"alice_crypto\",\n    \"wallet\": {\n      \"bitcoin\": {\n        \"amount\": 0.05,\n        \"usdValue\": 3350.00\n      },\n      \"ethereum\": {\n        \"amount\": 2.5,\n        \"usdValue\": 8750.00\n      }\n    },\n    \"totalUsdValue\": 12100.00,\n    \"prices\": {\n      \"bitcoin\": 67000,\n      \"ethereum\": 3500\n    },\n    \"lastUpdated\": \"2024-01-01T12:00:00.000Z\"\n  }\n}"
						}
					]
				},
				{
					"name": "Deposit Cryptocurrency",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"playerId\": \"{{player_id}}\",\n  \"amount\": 0.001,\n  \"cryptocurrency\": \"bitcoin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wallet/deposit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wallet",
								"deposit"
							]
						},
						"description": "Deposit cryptocurrency to a player's wallet. This simulates receiving cryptocurrency from an external source."
					},
					"response": []
				},
				{
					"name": "Withdraw Cryptocurrency",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"playerId\": \"{{player_id}}\",\n  \"amount\": 0.001,\n  \"cryptocurrency\": \"bitcoin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wallet/withdraw",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wallet",
								"withdraw"
							]
						},
						"description": "Withdraw cryptocurrency from a player's wallet. This simulates sending cryptocurrency to an external address."
					},
					"response": []
				},
				{
					"name": "Transfer Between Players",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromPlayerId\": \"player_alice\",\n  \"toPlayerId\": \"player_bob\",\n  \"amount\": 0.001,\n  \"cryptocurrency\": \"bitcoin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wallet/transfer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wallet",
								"transfer"
							]
						},
						"description": "Transfer cryptocurrency between two players. Both players must exist and the sender must have sufficient balance."
					},
					"response": []
				},
				{
					"name": "Get Transaction History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/wallet/transactions/{{player_id}}?limit=20&page=1&type=bet",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wallet",
								"transactions",
								"{{player_id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"description": "Number of transactions to return"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number for pagination"
								},
								{
									"key": "type",
									"value": "bet",
									"description": "Filter by transaction type (bet, cashout, deposit, withdrawal)"
								}
							]
						},
						"description": "Get paginated transaction history for a specific player, with optional filtering by transaction type."
					},
					"response": []
				},
				{
					"name": "Get All Players",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/wallet/players?limit=20&page=1&active=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wallet",
								"players"
							],
							"query": [
								{
									"key": "limit",
									"value": "20",
									"description": "Number of players to return"
								},
								{
									"key": "page",
									"value": "1",
									"description": "Page number for pagination"
								},
								{
									"key": "active",
									"value": "true",
									"description": "Filter by active status"
								}
							]
						},
						"description": "Get a paginated list of all players with their wallet balances and statistics."
					},
					"response": []
				},
				{
					"name": "Update Player Status",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isActive\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/wallet/player/{{player_id}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"wallet",
								"player",
								"{{player_id}}",
								"status"
							]
						},
						"description": "Update the active status of a player account. Inactive players cannot participate in games."
					},
					"response": []
				}
			],
			"description": "Wallet management endpoints for players, balances, and transactions"
		},
		{
			"name": "Cryptocurrency API",
			"item": [
				{
					"name": "Get Current Prices",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/crypto/prices",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"crypto",
								"prices"
							]
						},
						"description": "Get current market prices for all supported cryptocurrencies (Bitcoin and Ethereum) in USD."
					},
					"response": [
						{
							"name": "Crypto Prices Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/crypto/prices",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"crypto",
										"prices"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"prices\": {\n      \"bitcoin\": 67000,\n      \"ethereum\": 3500\n    },\n    \"timestamp\": \"2024-01-01T12:00:00.000Z\",\n    \"cacheDuration\": 10000\n  }\n}"
						}
					]
				},
				{
					"name": "Get Specific Price",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/crypto/price/bitcoin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"crypto",
								"price",
								"bitcoin"
							]
						},
						"description": "Get the current market price for a specific cryptocurrency. Supported: bitcoin, ethereum."
					},
					"response": []
				},
				{
					"name": "Convert USD to Crypto",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"usdAmount\": 100,\n  \"cryptocurrency\": \"bitcoin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/crypto/convert/usd-to-crypto",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"crypto",
								"convert",
								"usd-to-crypto"
							]
						},
						"description": "Convert a USD amount to cryptocurrency at current market rates."
					},
					"response": []
				},
				{
					"name": "Convert Crypto to USD",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cryptoAmount\": 0.001,\n  \"cryptocurrency\": \"bitcoin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/crypto/convert/crypto-to-usd",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"crypto",
								"convert",
								"crypto-to-usd"
							]
						},
						"description": "Convert a cryptocurrency amount to USD at current market rates."
					},
					"response": []
				},
				{
					"name": "Get Supported Cryptocurrencies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/crypto/supported",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"crypto",
								"supported"
							]
						},
						"description": "Get a list of all supported cryptocurrencies."
					},
					"response": []
				},
				{
					"name": "Get Cache Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/crypto/cache/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"crypto",
								"cache",
								"status"
							]
						},
						"description": "Get the current status of the cryptocurrency price cache, including age and expiration information."
					},
					"response": []
				},
				{
					"name": "Clear Cache",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/crypto/cache/clear",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"crypto",
								"cache",
								"clear"
							]
						},
						"description": "Clear the cryptocurrency price cache, forcing fresh data to be fetched on the next request."
					},
					"response": []
				}
			],
			"description": "Cryptocurrency price and conversion endpoints"
		},
		{
			"name": "WebSocket Management",
			"item": [
				{
					"name": "Get WebSocket Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/websocket/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"websocket",
								"stats"
							]
						},
						"description": "Get statistics about current WebSocket connections, including total connections, registered players, and client information."
					},
					"response": []
				},
				{
					"name": "Send Message to Player",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"playerId\": \"{{player_id}}\",\n  \"message\": {\n    \"type\": \"custom_message\",\n    \"data\": {\n      \"text\": \"Hello from the server!\",\n      \"timestamp\": \"2024-01-01T12:00:00.000Z\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/websocket/send-to-player",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"websocket",
								"send-to-player"
							]
						},
						"description": "Send a custom message to a specific player via their WebSocket connection."
					},
					"response": []
				},
				{
					"name": "Broadcast Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"message\": {\n    \"type\": \"server_announcement\",\n    \"data\": {\n      \"text\": \"Server maintenance in 5 minutes\",\n      \"timestamp\": \"2024-01-01T12:00:00.000Z\"\n    }\n  },\n  \"excludeClients\": []\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/websocket/broadcast",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"websocket",
								"broadcast"
							]
						},
						"description": "Broadcast a message to all connected WebSocket clients, with optional client exclusion."
					},
					"response": []
				}
			],
			"description": "WebSocket management and messaging endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default values if variables are not defined",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:3000');",
					"}",
					"",
					"if (!pm.environment.get('player_id')) {",
					"    pm.environment.set('player_id', 'player_alice');",
					"}",
					"",
					"if (!pm.environment.get('round_id')) {",
					"    pm.environment.set('round_id', 'round_1234567890_1');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for all requests",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has correct Content-Type', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});",
					"",
					"// Test for successful responses",
					"if (pm.response.code >= 200 && pm.response.code < 300) {",
					"    pm.test('Response has success field', function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.have.property('success');",
					"    });",
					"}",
					"",
					"// Test for error responses",
					"if (pm.response.code >= 400) {",
					"    pm.test('Error response has message', function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.have.property('message');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string",
			"description": "Base URL for the Crypto Crash API server"
		},
		{
			"key": "player_id",
			"value": "player_alice",
			"type": "string",
			"description": "Default player ID for testing (use one of the seeded players)"
		},
		{
			"key": "round_id",
			"value": "round_1234567890_1",
			"type": "string",
			"description": "Sample round ID for testing round-specific endpoints"
		}
	]
}

